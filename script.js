'use strict';

// prettier-ignore
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');
let map,mapEvent;

//Using the Geolocation API
if(navigator.geolocation)
//the function .getCurrentPosition() accepts two callback functions. 1) THE FIRST one AKA the POSITION PARAMETER will be called when the browser successfully got the coordinates of the current position of the user 2) THE SECOND callback is the Error Callback which is the one that is gonna be called when there happened while getting the coordinates
  navigator.geolocation.getCurrentPosition(function(position){
    // console.log(position);
    //STEP ONE OF FLOWCHART?
    const {latitude} = position.coords;
    const {longitude} = position.coords;
    // console.log(latitude,longitude);
    console.log(`https://www.google.com/maps/@${latitude},${longitude}`);
    
    const coords = [latitude, longitude] 
    //DISPLAYING A MAP USING LEAFLET LIBRARY--STEP 2 OF FLOWCHART?

    //whenever we use a third-party library, the first thing to do is to basically include it in our site 

    //copied from the leaflet website
    map = L.map('map').setView(coords, 13); // L is the namespace for Leaflet and we have access to it in this script because we have linked the leaflet script before ours and in that script L is basically a global variable inside the script of leaflet and L has a couple methods that we can use.  
    //second parameter is the zoom level, so 10 would be more zoomed out than 13 etc.

    //the map loads by tiles (one by one) and the appearance of the map can be customizable by themes... previously, the url was 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' and the map looked different
    console.log(map);


    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    //map.on() is not a method from JavaScript itself, but it comes from the leaflet library. So this map object is in fact an object that was generated by leaflet.
    //map.on() is similar to the standard built-in .addEventListener method.
    
    //Handling clicks on map
    map.on('click', function(mapE){
      mapEvent = mapE;
      form.classList.remove('hidden');
      //using the focus method makes it so that when we click on the map and the input form is revealed, the cursor will be focused on the Distance input field.
      //having the cursor focused on an input field adds for a better user experience as they will be able to immediately start typing.
      inputDistance.focus()
    })
    }, function(){
    alert('Could not get your position')
  });

  form.addEventListener('submit', function(e){
    e.preventDefault()
    //Clear input fields
    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value ='';


    //display marker
     console.log(mapEvent);
     //this function has access to mapEvent because it is a global variable.
      const {lat, lng} = mapEvent.latlng;

      //.marker() creates the marker
      //.addTo() adds the marker to the app
      //.bindPopup() create a pop up and bind it to the marker-- instead of inputting a simple string, you can also create a brand new popup object which will then contain a couple of options
      //.openPopup()
      L.marker([lat,lng]).addTo(map)
      .bindPopup(L.popup({
        maxWidth:250,
        minWidth: 100,
        autoClose: false,
        closeOnClick:false,
        className: 'running-popup'
      }))
      .setPopupContent('Workout')
      .openPopup();
  })

  inputType.addEventListener('change', function(){
    //closest selects the closest parent vs querySelector selects the child.
    //when one (Running or cycling) is visible, the other is hidden so we use the toggle method to either turn the hidden class on or off
    //The running type is hard coded in HTML while cycling is hidden. so when the change event happens, both Elevation and Cadence are toggled meaning the running type is hidden while the cycling is now visible.
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');
  })


